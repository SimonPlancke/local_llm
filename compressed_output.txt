<?xml version='1.0' encoding='utf-8'?>
<source type="local_directory" path="C:\Users\simon.plancke\OneDrive - Keyrus\Documents\repositories\SportsCompetition"><file name="get_data\main.py">datetime import datetime pathlib import path import os src.api_methods import get_methods src.api_methods import authorize src.data_preprocessing import main data_prep # used f.e set limit fetched activities (default - 30) activities_per_page = 200 # current page number activities page_number = 1 get_all_activities_params = { 'per_page': activities_per_page, 'page': page_number } def main(): main_directory = os.path.dirname(os.path.realpath(__file__)) token_directory = main_directory + '/refresh_tokens' file os.listdir(token_directory): # get name athlete file name athlete_name = path(file).stem # get refresh_token file refresh_token = open(f'{token_directory}/{file}', 'r').read() # get access token using refresh token token:str = authorize.get_acces_token(refresh_token) # get strava data athlete data:dict = get_methods.access_activity_data(token, params=get_all_activities_params) df = data_prep.preprocess_data(data) timestamp = datetime.now().strftime("%y%m%d%h%m%s") df.to_csv(path(f'{main_directory}/data', f'{athlete_name}_{timestamp}.csv'), index=false) def single_player(): refresh_token = "55d3df7944ef1d6ec57a2f11d1b8d91be23824d3" #open(f'{token_directory}/{file}', 'r').read() athlete_name = 'ket_kharashvili' main_directory = 'get_data' # get access token using refresh token token:str = authorize.get_acces_token(refresh_token) # get strava data athlete data:dict = get_methods.access_activity_data(token, params=get_all_activities_params) df = data_prep.preprocess_data(data) timestamp = datetime.now().strftime("%y%m%d%h%m%s") df.to_csv(path(f'{main_directory}/data', f'{athlete_name}_{timestamp}.csv'), index=false) __name__ == '__main__': main() # single_player()</file><file name="get_data\README.md"># strava activity data retrieval using python python script allows retrieve activity data strava's api store local .csv file ## installation 1. clone repository local machine. ```bash git clone https://github.com/yourusername/strava-activity-retrieval.git cd strava-activity-retrieval ``` 2. install required packages using pip. ```bash pip install -r requirements.txt ``` ## configuration 1. create `.env` file project directory following content: ``` client_id=xxxxxxxx client_secret=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx refresh_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ``` replace every field data. ## usage run python script retrieve strava activity data: ```bash python main.py ``` follow on-screen instructions authorize application retrieve activity data. data saved csv file **data/** directory current datetime suffix. happy analyzing strava activity data!</file><file name="get_data\refresh_token.py">response = {"token_type":"bearer","expires_at":1708638285,"expires_in":21600,"refresh_token":"bff62ed8ee0a75fcb425b965f6b368ab30d47fb5","access_token":"a40ffd86257ad5fbf32dde29e9125108b1d3f2c8","athlete":{"id":73281514,"username":"plancke","resource_state":2,"firstname":"simon","lastname":"plancke","bio":'null',"city":'null',"state":'null',"country":'null',"sex":"m","premium":'false',"summit":'false',"created_at":"2020-12-02t18:05:10z","updated_at":"2024-02-22t15:40:29z","badge_type_id":0,"weight":0.0,"profile_medium":"https://graph.facebook.com/3557003947746255/picture?height=256\u0026width=256","profile":"https://graph.facebook.com/3557003947746255/picture?height=256\u0026width=256","friend":'null',"follower":'null'}} print(response["refresh_token"])</file><file name="get_data\requirements.txt">environs==9.5.0 pandas==2.1.0 requests==2.31.0</file><file name="get_data\drop\Cédric_Smirnov.txt">a218228fb473f8536e4f6833e3ef8c2706b657c4</file><file name="get_data\refresh_tokens\Abdulrahman_Alrazaz.txt">d8efdf058bdc11b970beb24fccf469d01667d634</file><file name="get_data\refresh_tokens\Ana_Seoane-Ruiz.txt">5341c698975a17c11f0608c1e4ddfe554df07893</file><file name="get_data\refresh_tokens\Arthur-Nyns_Nyns.txt">ae668994b72d9d88fa3b8e368ec1299fef8ddec6</file><file name="get_data\refresh_tokens\Arthur_Vandecan.txt">e4c1562cadbea4bd5c2a4716bd1b3f30e07dc4c7</file><file name="get_data\refresh_tokens\Axel_Botton-Roulin.txt">b2d2b424339d1ae51343e125b19630a2e0b67400</file><file name="get_data\refresh_tokens\Ben_Curvers.txt">24734fa8769e391d862d365205db87f92d8f9d93</file><file name="get_data\refresh_tokens\Charline_Doyen.txt">7e126aa75851c1e361b8f155a27ffe4fb0a74736</file><file name="get_data\refresh_tokens\Clotilde_L.txt">650dba793f501eda15e3c482f9e2e31d672bbb30</file><file name="get_data\refresh_tokens\Danaë_Geurten.txt">d69201d69519102b7526d66e400f510ae7c8b1a6</file><file name="get_data\refresh_tokens\Elias_Van-Haver.txt">ab88af3e280a34e121eea0f3b247717569a78f5a</file><file name="get_data\refresh_tokens\Elonie_Standaert.txt">9834f42c1299b48bb91162d1f51f7c5db261e2ee</file><file name="get_data\refresh_tokens\Flavio_Marinello.txt">ae84ca70d3897a91e282736492d3e58b7a5bcdd6</file><file name="get_data\refresh_tokens\Florian_Ferrelli.txt">25ef33b03d8cce8318be79d16d9626298e1ae236</file><file name="get_data\refresh_tokens\Guillaume_Michaux.txt">6983bdfe7117ed8e766e3db503ccbbc72c879db9</file><file name="get_data\refresh_tokens\Hanri_Naudé.txt">e107172760f730d31546dd9eb67070f56029ed2f</file><file name="get_data\refresh_tokens\Hilde_Mosselmans.txt">8fa4443ff53e6650ef415cd6c34e2e690e81a9ee</file><file name="get_data\refresh_tokens\Hélène_Willekens.txt">fcb62f170f135217d1d7ae9d11a93434855efda8</file><file name="get_data\refresh_tokens\James_Applebee.txt">1603770773b933b7cb5692a9d25515b641d180e4</file><file name="get_data\refresh_tokens\JF_T'Serclaes.txt">1cad30525d7033d1c18d00b4be40f16aa009f6bd</file><file name="get_data\refresh_tokens\Karel_Dewitte.txt">9128f4a910188abe4f3e13e94f18f86dfffa196b</file><file name="get_data\refresh_tokens\Ket_Kharashvili.txt">55d3df7944ef1d6ec57a2f11d1b8d91be23824d3</file><file name="get_data\refresh_tokens\Kieran_Kelly.txt">d62896d934bc4e7448b6046a04fbda55e9b0b98f</file><file name="get_data\refresh_tokens\Laissa_Larbi.txt">e7ca5b44a16d57f4828f692a55fa1f899df21682</file><file name="get_data\refresh_tokens\Lisanza_Faccilongo.txt">9ceeb55b43aa648023354fdd45259803efaf462d</file><file name="get_data\refresh_tokens\Louis_Wellekens.txt">802e08a8072c04ef5e5d13ccff889a0eb8ef2653</file><file name="get_data\refresh_tokens\marine_Lafitau.txt">b0a9bfa7ab40395bb56e99e0a75a219f5a3ff9eb</file><file name="get_data\refresh_tokens\Mathieu_Pas.txt">9956c154fd2e40e9c8b588cd4b50cf50dc5806ea</file><file name="get_data\refresh_tokens\Maxime_Verheyen.txt">432d73b01b87dd4507098bda05d5cb9edb8336fd</file><file name="get_data\refresh_tokens\Morad_Masnaoui.txt">803a62aae7d3067befc78df5af1ccea743051a3c</file><file name="get_data\refresh_tokens\Nicolas_Charpentier.txt">4b06578310b45109c8508c491aa521099e10aacb</file><file name="get_data\refresh_tokens\Philip_Allegaert.txt">4d9e4936cb44b7c9f17bf264383e5a86c66e4d16</file><file name="get_data\refresh_tokens\Quentin_Caesens.txt">b6468ebf712a47a1ae12fa4014d46bcb335a4d6e</file><file name="get_data\refresh_tokens\Robbe_Caron.txt">685027646c6b0f051ee6e9dbfc7a19308ff53446</file><file name="get_data\refresh_tokens\Simon_Plancke.txt">bff62ed8ee0a75fcb425b965f6b368ab30d47fb5</file><file name="get_data\refresh_tokens\Sofie_Destoop.txt">2b1db0f45dc5e46ebf00ea417c2fd3d2a1a37086</file><file name="get_data\refresh_tokens\Tanguy_Stienlet.txt">9045a2400eb050eafa9e00899ed32e81e133f874</file><file name="get_data\refresh_tokens\Thomas_de Coninck.txt">866691c9679f493c3e1c59a3b8ed8f905029ab59</file><file name="get_data\refresh_tokens\Vincent_Payrat.txt">ec2c27ff17c73ddd6859f3e49c1b18ccdf06275c</file><file name="get_data\refresh_tokens\William_Bossut.txt">cd0fd4cc7650e493d1bd4d0fa4fe02d0cc62fbc8</file><file name="get_data\refresh_tokens\󠁧󠁢Michael_Dixon.txt">8fe1c7111147f9c2489f3355a6402e0fc156e129</file><file name="get_data\src\env_handler.py">import os environs import env def _load_env_variables() -&gt; dict: # load environment variables .env file env = env() env.read_env() # get environment variables .env file client_id = os.environ.get('client_id') client_secret = os.environ.get('client_secret') env_variables:dict = { 'client_id': client_id, 'client_secret': client_secret } return env_variables env_variables = _load_env_variables() # function check environment variables set def check_env_variables(env_variables_list: list) -&gt; [none, valueerror]: none env_variables_list: raise valueerror("environment variables retrieved properly") client_id = env_variables['client_id'] client_secret = env_variables['client_secret'] env_variables_to_check = [ client_id none, client_secret none ] check_env_variables(env_variables_to_check)</file><file name="get_data\src\__init__.py" /><file name="get_data\src\api_methods\authorize.py">import requests src.api_methods import endpoints src.env_handler import env_variables def get_acces_token(refresh_token): # params needs passed get access # token used retrieveing actual data payload:dict = { 'client_id': env_variables['client_id'], 'client_secret': env_variables['client_secret'], 'refresh_token': refresh_token, 'grant_type': "refresh_token", 'f': 'json' } res = requests.post(endpoints.auth_endpoint, data=payload, verify=false) access_token = res.json()['access_token'] return access_token</file><file name="get_data\src\api_methods\endpoints.py">auth_endpoint:str = "https://www.strava.com/oauth/token" activites_endpoint:str = "https://www.strava.com/api/v3/athlete/activities"</file><file name="get_data\src\api_methods\get_methods.py">import requests src.api_methods import endpoints def access_activity_data(access_token:str, params:dict=none) -&gt; dict: headers:dict = {'authorization': f'authorization: bearer {access_token}'} params: response:dict = requests.get(endpoints.activites_endpoint, headers=headers) response:dict = requests.get(endpoints.activites_endpoint, headers=headers, params=params) response.raise_for_status() activity_data = response.json() return activity_data</file><file name="get_data\src\api_methods\__init__.py" /><file name="get_data\src\data_preprocessing\main.py">import pandas pd def preprocess_data(data:dict) -&gt; pd.dataframe: return pd.json_normalize(data)</file><file name="get_data\src\data_preprocessing\__init__.py" /><file name="get_results\calculate_scores.py">import os import pandas pd import numpy np datetime import datetime # ----------------------------------------------------------------- # set parameters start_date = '2024-05-06' end_date = '2024-05-26' sport_multipliers = { 'run': 5, 'walk': 5, 'hike': 5, 'ride': 1, 'swim': 25 } timing_multiplier = 25 # ----------------------------------------------------------------- # ----------------------------------------------------------------- # general functions def determine_working_hours(row): datetime_obj = datetime.fromisoformat(row[:-1]) # removing 'z' end time = datetime_obj.time() day = datetime_obj.date() weekday = datetime_obj.weekday() weekday == 5 weekday == 6: # saturday sunday return 1 # public holidays within competition considered outside working hours elif day.strftime('%y-%m-%d') ('2024-05-10', '2024-05-09', '2024-05-20'): return 1 else: time.hour &gt;= 8 time.hour &lt; 12: return 0 elif time.hour &gt;= 14 time.hour &lt; 17: return 0 else: return 1 def get_relevant_data(row): row['type'] sport_multipliers.keys(): sport_multiplier = sport_multipliers[row['type']] total_points = (row['distance']/1000*sport_multiplier) else: total_points = (row['moving_time']/3600*timing_multiplier) return total_points # ----------------------------------------------------------------- # ----------------------------------------------------------------- # orchestrating functions def get_proper_athletename(athletename): 'michaeldixon' athletename: athletename = 'michaeldixon' 'marinelafitau' athletename: athletename = 'marinelafitau' return athletename def create_athlete_dictionnary(): # create empty dictionnary athletes_dict = {} # folder-location strava data folder_name = 'get_data/data' # athlete: get latest strava extract available get_data/data folder # loop file folder, extract name athlete timestamp filename # athlete yet part dictionnary: add athlete-object # else: check timestamp larger current timestamp assigned athlete-object. yes, overwrite file_name (os.listdir(f'{folder_name}')): athlete_name = ''.join(file_name.split('_')[:2]) timestamp = (file_name.split('_')[2]).split('.')[0] athlete_name = get_proper_athletename(athlete_name) athlete_name athletes_dict.keys(): athletes_dict[athlete_name] = {'file_name': f'{folder_name}/{file_name}', 'file_timestamp': timestamp} elif athletes_dict[athlete_name]['file_timestamp'] &lt; timestamp: athletes_dict[athlete_name] = {'file_name': f'{folder_name}/{file_name}', 'file_timestamp': timestamp} # athlete-object: add multiplier teamnumber dictionnary athlete_info = pd.read_csv('get_results/athlete_info.csv') athlete athletes_dict: print(athlete) individual_info = athlete_info[athlete_info['athletename'] == athlete] # print(individual_info) athletes_dict[athlete]['multiplier'] = individual_info['multiplier'].iloc[0] athletes_dict[athlete]['teamnumber'] = individual_info['teamnumber'].iloc[0] # return dictionnary athlete-objects looking like: ''' { [ athlete_name: { "filename": athlete_name_yyyymmddhhmmss.csv "timestamp": yyyymmddhhmmss "multiplier": x "teamnumber": x } }, {...} ] } ''' return athletes_dict def collect_athlete_data(athletes_dict): data_list = [] file_name [athletes_data['file_name'] athletes_data athletes_dict.values()]: try: athlete_df = pd.read_csv(file_name) athlete_name_extract = ''.join((file_name.split('/')[-1]).split('_')[:2]) athlete_name_extract = get_proper_athletename(athlete_name_extract) athlete_df['athlete_name'] = athlete_name_extract athlete_df['multiplier'] = athletes_dict[athlete_name_extract]['multiplier'] athlete_df['team_number'] = athletes_dict[athlete_name_extract]['teamnumber'] athlete_df['outside_working_hours'] = athlete_df['start_date_local'].apply(lambda row: determine_working_hours(row)) athlete_df['keyrus_coworker'] = np.where(athlete_df['athlete_count'] &gt; 1, 1, 0) athlete_df['selfie'] = np.where(athlete_df['photo_count'] == 0, 0, 1) athlete_df_subset = athlete_df[(datetime.strptime(start_date, "%y-%m-%d").date() &lt;= pd.to_datetime(athlete_df['start_date_local']).dt.date) &amp; (pd.to_datetime(athlete_df['start_date_local']).dt.date &lt;= datetime.strptime(end_date, "%y-%m-%d").date())] data_list.append(athlete_df_subset) except: print(f"athlete seem activities logged: {file_name}") # concatenate dataframes dfs single dataframe all_data_dataframe = pd.concat(data_list, ignore_index=true) return all_data_dataframe def calculate_activity_points(dataframe): dataframe['start_date_date'] = pd.to_datetime(dataframe['start_date_local']).dt.date dataframe['total_points'] = dataframe.apply(lambda row: get_relevant_data(row), axis=1) relevant_columns = ['distance', 'moving_time', 'type', 'sport_type', 'workout_type', 'id','start_date_date', 'outside_working_hours', 'keyrus_coworker','photo_count', 'athlete_name', 'multiplier', 'team_number', 'selfie', 'total_points'] relevant_dataframe = dataframe[relevant_columns] return relevant_dataframe def main(): print("***start column calculations***") athlete_dictionnary = create_athlete_dictionnary() activity_data = collect_athlete_data(athlete_dictionnary) points_dataframe = calculate_activity_points(activity_data) points_dataframe.to_csv('get_results/data/calculated_columns.csv') print("***end column calculations***") __name__ == '__main__': main()</file><file name="get_results\get_sheets.py">import pandas pd # --------------------------------------------------------------- week_dict = { "week_1": { "start_date": "2024-05-06", "end_date": "2024-05-12" }, "week_2": { "start_date": "2024-05-13", "end_date": "2024-05-19" }, "week_3": { "start_date": "2024-05-20", "end_date": "2024-05-26" } } max_points = 100 # --------------------------------------------------------------- def get_athlete_point_total(group): points_dict = {} week week_dict: subgroup = group.loc[(group['start_date_date'] &gt;= week_dict[week]['start_date']) &amp; (group['start_date_date'] &lt;= week_dict[week]['end_date'])] points_dict[week] = ((1+subgroup['outside_working_hours'])*(1+subgroup['keyrus_coworker'])*(subgroup['multiplier'])*subgroup['total_points'] + 5*subgroup['selfie']).sum() return points_dict def calculate_individual_scores(df): weekly_athlete_points = df.groupby('athlete_name').apply(lambda group: get_athlete_point_total(group)) data_list = [] name, points_dict weekly_athlete_points.items(): data_list.append({ 'athlete_name': name, 'points_week_1': points_dict.get('week_1', none), 'points_week_2': points_dict.get('week_2', none), 'points_week_3': points_dict.get('week_3', none) }) # convert list dictionaries dataframe points_dataframe = pd.dataframe(data_list) points_dataframe['total_points'] = points_dataframe[['points_week_1', 'points_week_2', 'points_week_3']].sum(axis=1) to_merge = df.groupby('athlete_name', as_index=false)[['multiplier', 'team_number']].first() # multiplier,team_number points_dataframe = points_dataframe.merge(to_merge, on='athlete_name', how='left') # print(name) #print(points_dataframe) return points_dataframe def get_max_team_score(weekly_team_member): weekly_team_member['selfie'].replace(1.0, 0.5, inplace=true) weekly_team_member['benefits'] = weekly_team_member['keyrus_coworker'] + weekly_team_member['selfie'] + weekly_team_member['outside_working_hours'] #weekly_team_member['total_rebalanced_points'] = weekly_team_member.apply(lambda row: calculate_total_rebalanced_points(row), axis = 1) weekly_team_member = weekly_team_member.sort_values(by=['benefits', 'total_points'], ascending=(false, false)) #if name == 'simon plancke': print(weekly_team_member) individual_points = 0 multiplier_points = 0 range(0,len(weekly_team_member)): activity_points = (1+weekly_team_member.iloc[i]['outside_working_hours'])*(1+weekly_team_member.iloc[i]['keyrus_coworker'])*(int(weekly_team_member.iloc[i]['multiplier']))*weekly_team_member.iloc[i]['total_points'] + 5*weekly_team_member.iloc[i]['selfie'] individual_points += weekly_team_member.iloc[i]['total_points'] #if name == 'simon plancke': print(individual_points, multiplier_points) individual_points &gt; max_points: individual_points = individual_points - weekly_team_member.iloc[i]['total_points'] x = (max_points - individual_points)/weekly_team_member.iloc[i]['total_points'] weekly_team_member.iloc[i]['selfie'] == 0.5: multiplier_points = multiplier_points + (activity_points-5)*x +5 else: multiplier_points = multiplier_points + activity_points*x individual_points = individual_points + weekly_team_member.iloc[i]['total_points']*x #if name == 'simon plancke': print(individual_points, multiplier_points, x) break else: multiplier_points = multiplier_points + activity_points #if name == 'simon plancke': print(individual_points, multiplier_points) return multiplier_points def get_member_point_total(team_member): #print(team_member) points_dict = {} week week_dict: subgroup = team_member.loc[(team_member['start_date_date'] &gt;= week_dict[week]['start_date']) &amp; (team_member['start_date_date'] &lt;= week_dict[week]['end_date'])] subgroup['total_points'].sum() &lt; max_points: points_dict[week] = ((1+subgroup['outside_working_hours'])*(1+subgroup['keyrus_coworker'])*subgroup['total_points'] + 5*subgroup['selfie']).sum() else: points_dict[week] = get_max_team_score(subgroup) return points_dict def get_group_point_total(group): team_total_dict = group.groupby('athlete_name').apply(lambda group: get_member_point_total(group)) # print(group) team_total = [] team_member, points_dict team_total_dict.items(): team_total.append({ 'team_member': team_member, 'points_week_1': points_dict.get('week_1', none), 'points_week_2': points_dict.get('week_2', none), 'points_week_3': points_dict.get('week_3', none) }) team_total_dataframe = pd.dataframe(team_total) team_total_dataframe['total_points'] = team_total_dataframe[['points_week_1', 'points_week_2', 'points_week_3']].sum(axis=1) # print(team_total_dataframe) return team_total_dataframe def calculate_team_scores(df): weekly_team_member_df = df.groupby('team_number').apply(lambda group: get_group_point_total(group)) group_scores = [] team_number, group weekly_team_member_df.groupby('team_number'): # print(team_number) # print(group) group_scores.append({ 'team_number': team_number, 'points_week_1': group['points_week_1'].sum(), 'points_week_2': group['points_week_2'].sum(), 'points_week_3': group['points_week_3'].sum(), 'total_points': group['total_points'].sum() }) group_scores_dataframe = pd.dataframe(group_scores) # print(group_scores_dataframe) return group_scores_dataframe def write_to_individual_files(dataframe): print(dataframe) grouped_multiplier = dataframe.groupby('multiplier') week week_dict: pd.excelwriter("get_results/data/individual_ranking.xlsx",mode='a', if_sheet_exists='replace') writer: multiplier, group grouped_multiplier: columns = ['athlete_name', f'points_{week}', 'multiplier'] group = group[columns].sort_values(f'points_{week}', ascending=false) group.to_excel(writer, sheet_name=f'{week}_multiplier_{str(multiplier)}', columns=list(group.columns.values), header=true, index=false, startrow=0, startcol=0) pd.excelwriter("get_results/data/individual_ranking.xlsx",mode='a', if_sheet_exists='replace') writer: multiplier, group grouped_multiplier: columns = ['athlete_name', 'total_points', 'multiplier'] group = group[columns].sort_values('total_points', ascending=false) group.to_excel(writer, sheet_name=f'final_multiplier_{str(multiplier)}', columns=list(group.columns.values), header=true, index=false, startrow=0, startcol=0) return def write_to_group_files(dataframe): pd.excelwriter("get_results/data/team_ranking.xlsx",mode='a', if_sheet_exists='replace') writer: dataframe.to_excel(writer, sheet_name=f'team_standings', columns=list(dataframe.columns.values), header=true, index=false, startrow=0, startcol=0) return def main(): print("***start column calculations***") automated_scores = pd.read_csv('get_results/data/calculated_columns.csv') manual_scores = pd.read_csv('get_results/data/manually_calculated_columns.csv') total_scores = pd.concat([automated_scores, manual_scores]) # print(total_scores) weekly_individual_scores = calculate_individual_scores(total_scores) # print(weekly_individual_scores) write_to_individual_files(weekly_individual_scores) weekly_group_scores = calculate_team_scores(total_scores) write_to_group_files(weekly_group_scores) print("***end column calculations***") __name__ == '__main__': main()</file><file name="get_results\request_axel.py">import pandas pd def main(): print("***start column calculations***") automated_scores = pd.read_csv('get_results/data/calculated_columns.csv') manual_scores = pd.read_csv('get_results/data/manually_calculated_columns.csv') total_scores = pd.concat([automated_scores, manual_scores]) # # print(total_scores) # bike_activities = total_scores[total_scores['type'] == 'ride'] # # print(bike_activities) # total_bike_kms = (bike_activities['distance'].sum())/1000 # print(total_bike_kms) # total_number_cyclists = total_scores['type'].unique() # print(total_number_cyclists) # average_cycle_distance = total_bike_kms/len(total_number_cyclists) # print(average_cycle_distance) print("total number activities: ", total_scores['total_points'].count()) total_converted_kms = total_scores['total_points'].sum() print("total converted kms: ",total_converted_kms) bike_activities = total_scores[total_scores['type'].isin(['ride', 'virtualride', 'ebikeride'])] total_ride_kms = (bike_activities['distance'].sum())/1000 print("total cycling kms: ",total_ride_kms) walk_activities = total_scores[total_scores['type'].isin(['walk', 'hike'])] total_walk_kms = (walk_activities['distance'].sum())/1000 print("total walking kms: ",total_walk_kms) swim_activities = total_scores[total_scores['type'] == 'swim'] total_swim_kms = (swim_activities['distance'].sum())/1000 print("total swimming kms: ",total_swim_kms) run_activities = total_scores[total_scores['type'] == 'run'] total_run_kms = (run_activities['distance'].sum())/1000 print("total running kms: ",total_run_kms) workout_activities = total_scores[total_scores['type'].isin(['workout', 'weighttraining', 'rockclimbing', 'crossfit', 'yoga', 'golf', 'soccer', 'elliptical'])] total_workout_hours = (workout_activities['moving_time'].sum())/3600 print("total hours worked out: ",total_workout_hours) print("***end column calculations***") __name__ == '__main__': main()</file><file name="get_token\login.py">selenium import webdriver selenium.webdriver.common.by import urllib.parse import urlparse import requests import json pause import sleep # find username password input fields login button # username_field = browser.find_element(by.id, 'email') # replace 'username' actual id username field # password_field = browser.find_element(by.id, 'password') # replace 'password' actual id password field # login_button = browser.find_element(by.id, 'login-button') # replace 'login-btn' actual id login button # enter username password # username_field.send_keys(input("give strava login email address: ")) # # password_field.send_keys(input("give strava password: ")) # import maskpass # password_field.send_keys(maskpass.askpass(prompt="give strava password:", mask="*")) # click login button # login_button.click() # set environment variables #chrome_driver_path = 'c:\program files (x86)\google\chrome\application\chrome.exe' # replace 'path_to_chromedriver' actual path chromedriver client_id = 105125 client_secret = '258981ce6d5eea7d02c898b98d8d4f3098395060' def strava_login(): # launch chrome browser options = webdriver.chromeoptions() options.add_argument("--start-maximized") # maximize browser window start browser = webdriver.chrome(options=options) # open strava login screen login_url = "https://www.strava.com/login" browser.get(login_url) # wait user login waittime = 10 # number seconds wait 'ping' server maxtries = 12 # maximal number 'pings' send server. exceeded, code stop throw error numtries = 0 # initialize total number tries # 'login-button' still exists: # check numtries &lt; maxtries -&gt; wait true, break false browser.find_elements(by.id, 'login-button'): numtries &lt; maxtries: print("waiting user input...") sleep(waittime) numtries += 1 else: raise valueerror("took long login. process stopped.") # wait login process complete (page need refresh logging in) browser.implicitly_wait(10) return browser def authorize_api(browser): # connect keyrus sports competition api client url = f"https://www.strava.com/oauth/authorize?client_id={client_id}&amp;response_type=code&amp;redirect_uri=http://localhost/exchange_token&amp;approval_prompt=force&amp;scope=activity:read_all" # use chrome browser, user logged in, surf api authorization screen browser.get(url) # find 'authorize' button screen authorize_button = browser.find_element(by.id, 'authorize') # button found: authorize_button: authorize_button.click() # click 'authorize' button browser.implicitly_wait(10) # wait 10 seconds screen refresh redirected_url = browser.current_url # get url new page browser.quit() # close browser # print("authorize url:", redirected_url) # print redirected url: http://localhost/exchange_token?state=&amp;code={temporary_accesstoken}&amp;scope=read,activity:read_all parsed_url = urlparse(redirected_url) # parse url sections # parsed url: # get query-section # filter query-section split '&amp;' symbol # return dictionary keys values filter filter_dict = dict(filter.split("=") filter (parsed_url.query).split("&amp;")) # return value code-filter (which access_token used access strava account) return filter_dict['code'] # button found: throw error else: raise valueerror("no authorization button found. something went wrong...") def get_refreshtoken(accesstoken): # use access_token get refresh_token # define url payload url = "https://www.strava.com/oauth/token" payload = { "client_id": client_id, "client_secret": client_secret, "code": accesstoken, "grant_type": "authorization_code" } # send post request response = requests.post(url, data=payload) # post request return json-object information strava account # loop json-object key, value (json.loads(response.text)).items(): # refresh_token key found, store value variable key == 'refresh_token': refresh_token = value # athlete-key found, loop object key == 'athlete': athlete_key, athlete_value value.items(): # store first last name athlete variables athlete_key == 'firstname': firstname = athlete_value elif athlete_key == 'lastname': lastname = athlete_value # write refresh_token athlete txt-file named 'firstname_lastname.txt' file = open(f'get_token/{firstname}_{lastname}.txt', 'w') file.write(refresh_token) file.close() return def main(): print("***start login process***") browser = strava_login() accesstoken = authorize_api(browser) get_refreshtoken(accesstoken) __name__ == '__main__': main()</file><file name="get_token\requirements.txt">selenium==4.18.0 requests==2.28.1 pause==0.3</file><file name="get_token\Simon_Plancke.txt">bff62ed8ee0a75fcb425b965f6b368ab30d47fb5</file></source>